generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                  String          @id @default(cuid())
  name                                String?
  email                               String          @unique
  emailVerified                       DateTime?       @map("email_verified")
  image                               String?
  createdAt                           DateTime        @default(now()) @map("created_at")
  updatedAt                           DateTime        @updatedAt @map("updated_at")
  isAdmin                             Boolean         @default(false) @map("is_admin")
  isBanned                            Boolean         @default(false) @map("is_banned")
  accounts                            Account[]
  authenticators                      Authenticator[]
  Comment_Comment_updated_by_idToUser Comment[]       @relation("Comment_updated_by_idToUser")
  Comment_Comment_created_by_idToUser Comment[]       @relation("Comment_created_by_idToUser")
  Post_Post_created_by_idToUser       Post[]          @relation("Post_created_by_idToUser")
  Post_Post_updated_by_idToUser       Post[]          @relation("Post_updated_by_idToUser")
  PostActivity                        PostActivity[]
  PostVote                            PostVote[]
  PostWatches                         PostWatches[]
  sessions                            Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String    @unique(map: "Session_sessionToken_key") @map("session_token")
  userId       String    @map("user_id")
  expires      DateTime
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @map("updated_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique(map: "Authenticator_credentialID_key") @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Authenticator_userId_fkey")

  @@id([userId, credentialID])
}

model Board {
  id              String     @id(map: "boards_pk")
  title           String
  description     String
  index           Int        @default(1)
  show_in_roadmap Boolean    @default(false)
  categories      Category[]
  posts           Post[]
}

model Post {
  id            String         @id(map: "posts_pk")
  title         String
  description   String
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?      @db.Timestamptz(6)
  created_by_id String?
  updated_by_id String?
  status_id     String?
  is_edited     Boolean        @default(false)
  board_id      String?
  category_id   String?
  comments      Comment[]
  board         Board?         @relation(fields: [board_id], references: [id], map: "post_board_id_fk")
  category      Category?      @relation(fields: [category_id, board_id], references: [id, board_id], map: "post_category_id_board_id_fk")
  created_by    User?          @relation("Post_created_by_idToUser", fields: [created_by_id], references: [id], map: "post_user_id_fk")
  updated_by    User?          @relation("Post_updated_by_idToUser", fields: [updated_by_id], references: [id], map: "post_user_id_fk_2")
  status        Status?        @relation(fields: [status_id], references: [id], map: "posts_statuses_id_fk")
  activity      PostActivity[]
  media         PostMedia[]
  tags          PostTag[]
  votes         PostVote[]
  PostWatches   PostWatches[]
}

model Status {
  id              String  @id(map: "statuses_pk")
  title           String
  color           String
  index           Int?
  is_default      Boolean @default(false)
  show_in_roadmap Boolean @default(false)
  posts           Post[]
}

model Tag {
  id    String    @id(map: "tags_pk")
  title String
  color String
  posts PostTag[]
}

model Config {
  key   String @id(map: "config_pk")
  value String
}

model Comment {
  id            Int            @id(map: "comment_pk") @default(autoincrement())
  body          String         @default("")
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  created_by_id String?
  updated_at    DateTime?      @db.Timestamptz(6)
  updated_by_id String?
  post_id       String
  post          Post           @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "comment_post_id_fk")
  updated_by    User?          @relation("Comment_updated_by_idToUser", fields: [updated_by_id], references: [id], map: "comment_user_id_fk")
  created_by    User?          @relation("Comment_created_by_idToUser", fields: [created_by_id], references: [id], map: "comment_user_id_fk_2")
  media  CommentMedia[]
}

model Category {
  id       String
  title    String
  board_id String
  board    Board  @relation(fields: [board_id], references: [id], onDelete: Cascade, map: "category_board_id_fk")
  Post     Post[]

  @@id([id, board_id], map: "category_pk")
}

model PostTag {
  post_id String
  tag_id  String
  post    Post   @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "posttag_post_id_fk")
  tag     Tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade, map: "posttag_tag_id_fk")

  @@id([tag_id, post_id], map: "posttag_pk")
}

model PostMedia {
  name       String
  url        String   @unique(map: "postmedia_uk")
  mime       String   @default("application/octet-stream")
  size       Int      @default(0)
  created_by String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  post_id    String
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "postmedia_post_id_fk")
}

model PostVote {
  post_id String
  user_id String
  post    Post   @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "postvote_post_id_fk")
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "postvote_user_id_fk")

  @@id([post_id, user_id], map: "postvote_pk")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model PostActivity {
  post_id       String
  type          String
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  created_by_id String?
  id            Int      @id(map: "postactivity_pk") @default(autoincrement())
  description   String   @default("")
  post          Post     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "postactivity_post_id_fk")
  created_by    User?    @relation(fields: [created_by_id], references: [id], map: "postactivity_user_id_fk")
}

model PostWatches {
  user_id    String
  post_id    String
  watched_at DateTime @default(now()) @db.Timestamptz(6)
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade, map: "postwatches_post_id_fk")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "postwatches_user_id_fk")

  @@id([post_id, user_id], map: "postwatches_pk")
}

model CommentMedia {
  name       String
  url        String   @unique(map: "commentmeda_uk")
  mime       String   @default("application/octet-stream")
  size       Int      @default(0)
  created_by String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  comment_id Int
  comment    Comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade, map: "commentmedia_comment_id_fk")
}
